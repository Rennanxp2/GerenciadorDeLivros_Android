package app.BdsSqliteHelper;

import java.util.ArrayList;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import app.livroDAO.Livro;

public class BDSQLiteHelper extends SQLiteOpenHelper {

	private static final int DATABASE_VERSION = 1;
	private static final String DATABASE_NAME = "LivroBD";
	private static final String TABELA_LIVROS = "livros";
	private static final String ID = "id";
	private static final String TITULO = "titulo";
	private static final String SUBTITULO = "subtitulo";
	private static final String AUTOR = "autor";
	private static final String ISBN = "isbn";
	private static final String EDITORA = "editora";
	private static final String EDICAO = "edicao";
	private static final String ANO = "ano";
	private static final String PAGINAS = "paginas";
	private static final String CATEGORIA = "categoria";

	private static final String[] COLUNAS = { ID, TITULO, SUBTITULO, AUTOR, ISBN, EDITORA, EDICAO, ANO, PAGINAS,
			CATEGORIA };

	public BDSQLiteHelper(Context context) {
		super(context, DATABASE_NAME, null, DATABASE_VERSION);
		
		
	}

	@Override
	public void onCreate(SQLiteDatabase db) {
		String CREATE_TABLE = "CREATE TABLE  livros (" + "id 		INTEGER PRIMARY KEY AUTOINCREMENT,"
				+ "titulo 	TEXT," + "subtitulo  TEXT," + "autor 		TEXT," + "isbn 		TEXT,"
				+ "editora 	TEXT," + "edicao 	TEXT," + "ano 		TEXT," + "paginas 	TEXT,"
				+ "categoria  TEXT)";
		
		String INSERT = "INSERT INTO livros (titulo, subtitulo, autor, isbn, editora, edicao, ano, paginas, categoria) "
				+ "VALUES('Harry potter',"
				+ "'e o enigma do principe',"
				+ "'j.k rowling',"
				+ "'12345678910111',"
				+ "'Bloomsbury Publishing Plc',"
				+ "'1ed',"
				+ "'1996',"
				+ "'400',"
				+ "'Jornais')";
		
		 INSERT = "INSERT INTO livros (titulo, subtitulo, autor, isbn, editora, edicao, ano, paginas, categoria) "
				+ "VALUES('SQLite',"
				+ "'Para iniciantes',"
				+ "'NEXTPAGE livros',"
				+ "'123456789',"
				+ "'Unicid',"
				+ "'2ed',"
				+ "'2017',"
				+ "'200',"
				+ "'Livros Raros')";
		 
		 INSERT = "INSERT INTO livros (titulo, subtitulo, autor, isbn, editora, edicao, ano, paginas, categoria) "
					+ "VALUES('Java',"
					+ "'Para Experientes',"
					+ "'NEXTPAGE livros',"
					+ "'987654321',"
					+ "'3b noturno',"
					+ "'5ed',"
					+ "'2017',"
					+ "'300',"
					+ "'Bibliografia')";
		 
		 INSERT = "INSERT INTO livros (titulo, subtitulo, autor, isbn, editora, edicao, ano, paginas, categoria) "
					+ "VALUES('Twilight moon',"
					+ "'o amanhecer',"
					+ "'Fulano de tal',"
					+ "'987654321123456',"
					+ "'3b noturno',"
					+ "'7ed',"
					+ "'lancamento oficial 2018',"
					+ "'512',"
					+ "'Romance')";
		
		db.execSQL(CREATE_TABLE);
		
		db.execSQL(INSERT);
		
        
		
	}

	@Override
	public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
		db.execSQL("DROP TABLE IF EXISTS livros");
		this.onCreate(db);
	}

	public void addLivro(Livro livro) {
		SQLiteDatabase db = this.getWritableDatabase();

		ContentValues values = new ContentValues();

		values.put(TITULO, livro.getTitulo());
		values.put(SUBTITULO, livro.getSubTitulo());
		values.put(AUTOR, livro.getAutor());
		values.put(ISBN, livro.getIsbn());
		values.put(EDITORA, livro.getEditora());
		values.put(EDICAO, livro.getEdicao());
		values.put(ANO, livro.getAno());
		values.put(PAGINAS, livro.getPaginas());
		values.put(CATEGORIA, livro.getCategoria());

		db.insert(TABELA_LIVROS, null, values);
		db.close();
	}

	private Livro cursorToLivro(Cursor cursor) {
		Livro livro = new Livro();

		livro.setId(Integer.parseInt(cursor.getString(0)));
		livro.setTitulo(cursor.getString(1));
		livro.setSubTitulo(cursor.getString(2));
		livro.setAutor(cursor.getString(3));
		livro.setIsbn(cursor.getString(4));
		livro.setEditora(cursor.getString(5));
		livro.setEdicao(cursor.getString(6));
		livro.setAno(cursor.getString(7));
		livro.setPaginas(cursor.getString(8));
		livro.setCategoria(cursor.getString(9));

		return livro;
	}

	public Livro getLivro(int ID) throws SQLException {

		SQLiteDatabase db = this.getReadableDatabase();

		Cursor cursor = db.query(TABELA_LIVROS, COLUNAS, " id = ?", new String[] { String.valueOf(ID) }, null, null,
				null, null);

		if (cursor == null) {
			return null;
		} else {
			cursor.moveToFirst();
			Livro livro = cursorToLivro(cursor);
			return livro;
		}
	}

	public ArrayList<Livro> getAllLivros() {

		ArrayList<Livro> listaLivros = new ArrayList<Livro>();

		String query = "SELECT * FROM " + TABELA_LIVROS;

		SQLiteDatabase db = this.getReadableDatabase();

		Cursor cursor = db.rawQuery(query, null);

		if (cursor.moveToFirst()) {

			do {
				Livro livro = cursorToLivro(cursor);
				listaLivros.add(livro);
			} while (cursor.moveToNext());
		}

		return listaLivros;
	}
	
	public ArrayList<Livro> getAllCategoria(String categoria) {

		ArrayList<Livro> listaLivros = new ArrayList<Livro>();

		String query = "SELECT * FROM " + TABELA_LIVROS + " Where categoria = '" + categoria + "'";
		
		SQLiteDatabase db = this.getReadableDatabase();

		Cursor cursor = db.rawQuery(query, null);

		if (cursor.moveToFirst()) {

			do {
				Livro livro = cursorToLivro(cursor);
				listaLivros.add(livro);
			} while (cursor.moveToNext());
		}

		return listaLivros;
	}

	public int updateLivro(Livro livro) {

		SQLiteDatabase db = this.getWritableDatabase();

		ContentValues values = new ContentValues();

		values.put(TITULO, livro.getTitulo());
		values.put(SUBTITULO, livro.getSubTitulo());
		values.put(AUTOR, livro.getAutor());
		values.put(ISBN,  livro.getIsbn());
		values.put(EDITORA, livro.getEditora());
		values.put(EDICAO, livro.getEdicao());
		values.put(ANO,  livro.getAno());
		values.put(PAGINAS, livro.getPaginas());
		values.put(CATEGORIA, livro.getCategoria());

		int i = db.update(TABELA_LIVROS, values, ID + "= ?", new String[] { String.valueOf(livro.getId()) });

		db.close();

		return i;
	}

	public int deleteLivro(Livro livro) {

		SQLiteDatabase db = this.getWritableDatabase();

		int i = db.delete(TABELA_LIVROS, ID + "= ?", new String[] { String.valueOf(livro.getId()) });

		db.close();

		return i;
	}

}
